// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    kakaoID       String    @unique
    email         String?
    emailVerified DateTime?
    image         String?
    nickname      String
    description   String?
    joinedAt      DateTime  @default(now())
    updatedAt     DateTime? @updatedAt
    expiresAt     DateTime?
    instagram     String?
    blog          String?
    youtube       String?
    naverPlace    String?
    name          String
    store         String
    Account       Account[]
    Session       Session[]
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model tokens {
    id       String   @id @default(auto()) @map("_id") @db.ObjectId
    email    String
    type     String
    expireAt DateTime
}

model Clients {
    id              String   @id @default(auto()) @map("_id") @db.ObjectId
    userID          String
    phoneNumber     String
    name            String
    gender          String
    birth           String
    visitPath       String
    hairThickness   String
    hairType        String
    hairFerm        String
    hairDye         String
    hairClinic      String
    hairStyle       String
    interestService String
    scalpType       String
    dandruff        String
    hairLoss        String
    sensitiveScalp  String
    tensionScalp    String
    memo            String
    important       String[]
    styleConcept    String[]
    importantHair   String[]
}

model ClientMemo {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    clientID   String
    userID     String
    memo       String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    
}

model ClientConsult {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    clientID   String
    userID     String
    front1    String
    side1   String
    front2  String
    side2   String
    memo       String
    replied   Boolean @default(false)
    reply      String
    reviewed   Boolean @default(false)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model ClientReview {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    clientID   String
    userID     String
    review     String
    image      String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}